// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse ./index.js.flow 1`] = `
Object {
  "declarationsByName": Object {
    "Array": Array [],
    "Object": Array [],
    "transitions": Array [
      Object {
        "kind": "FunctionDeclaration",
        "leadingComments": Array [
          Object {
            "type": "BlockComment",
            "value": "*
 * Shorthand that accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same tranisition values to (second parameter).
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),
 *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')
 * }
 *
 * // styled-components usage
 * const div = styled.div\`
 *   \${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};
 *   \${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};
 * \`
 *
 * // CSS as JS Output
 *
 * div {
 *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'
 *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',
 * }
 ",
          },
        ],
        "loc": SourceLocation {
          "end": Position {
            "column": 1,
            "line": 39,
          },
          "filename": "test-cases/tuples/index.js.flow",
          "start": Position {
            "column": 0,
            "line": 26,
          },
        },
        "localName": "transitions",
        "params": Array [],
        "restParam": Object {
          "name": "properties",
          "type": Object {
            "kind": "UnionType",
            "types": Array [
              Object {
                "kind": "GenericApplicationType",
                "params": Array [
                  Object {
                    "kind": "StringType",
                  },
                ],
                "type": Object {
                  "kind": "ReferenceType",
                  "name": "Array",
                },
              },
              Object {
                "kind": "TupleType",
                "types": Array [
                  Object {
                    "kind": "GenericApplicationType",
                    "params": Array [
                      Object {
                        "kind": "StringType",
                      },
                    ],
                    "type": Object {
                      "kind": "ReferenceType",
                      "name": "Array",
                    },
                  },
                  Object {
                    "kind": "StringType",
                  },
                ],
              },
            ],
          },
        },
        "returnType": Object {
          "kind": "ReferenceType",
          "name": "Object",
        },
        "typeParameters": Array [],
      },
    ],
  },
  "exportStatements": Array [
    Object {
      "kind": "DefaultExportStatement",
      "localName": "transitions",
    },
  ],
}
`;

exports[`print ./index.d.ts 1`] = `
"declare function transitions(...properties: Array<string>): Object;
declare function transitions(_0: Array<string>, _1: string): Object;
export default transitions;"
`;

exports[`print ./index.js.flow 1`] = `
"// @flow

declare function transitions(...properties: Array<string> | ([Array<string>, string])): Object;
export default transitions;"
`;
